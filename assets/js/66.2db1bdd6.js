(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{672:function(t,e,s){"use strict";s.r(e);var a=s(3),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("strong",[t._v("setState是同步还是异步")])]),t._v(" "),s("p",[s("code",[t._v("setState")]),t._v(" 只在合成事件和钩子函数中是“异步”的，在原生事件和 "),s("code",[t._v("setTimeout")]),t._v(" 中都是同步的")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("合成事件")]),t._v("：就是react 在组件中的onClick等都是属于它自定义的合成事件")]),t._v(" "),s("li",[s("strong",[t._v("原生事件")]),t._v("：比如通过addeventListener添加的，dom中的原生事件")])]),t._v(" "),s("p",[t._v("异步的更新机制")]),t._v(" "),s("p",[t._v("setState的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形式了所谓的“异步”，当然可以通过第二个参数 setState(partialState, callback) 中的callback拿到更新后的结果。")]),t._v(" "),s("p",[t._v("setState 的批量更新优化也是建立在“异步”（合成事件、钩子函数）之上的，在原生事件和setTimeout 中不会批量更新，在“异步”中如果对同一个值进行多次 setState ， setState 的批量更新策略会对其进行覆盖，取最后一次的执行，如果是同时 setState 多个不同的值，在更新时会对其进行合并批量更新")])])}),[],!1,null,null,null);e.default=n.exports}}]);